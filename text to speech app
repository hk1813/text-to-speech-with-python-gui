import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
import pyttsx3
import os

class TextToSpeechApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Text to Speech App")

        # Initialize variables
        self.selected_language = tk.StringVar()
        self.selected_voice = tk.StringVar()
        self.text_input = tk.StringVar()
        self.rate = tk.DoubleVar()
        self.volume = tk.DoubleVar()
        self.playing = False

        # Default values
        self.selected_language.set("English")
        self.selected_voice.set("Male")
        self.rate.set(150)  # Default rate
        self.volume.set(0.5)  # Default volume

        # GUI elements
        self.language_label = ttk.Label(self.root, text="Select Language:")
        self.language_dropdown = ttk.Combobox(self.root, textvariable=self.selected_language, values=["English", "Spanish", "French"])
        self.voice_label = ttk.Label(self.root, text="Select Voice:")
        self.voice_dropdown = ttk.Combobox(self.root, textvariable=self.selected_voice, values=["Male", "Female"])
        self.text_entry = ttk.Entry(self.root, textvariable=self.text_input, width=50)
        self.rate_label = ttk.Label(self.root, text="Rate:")
        self.rate_slider = ttk.Scale(self.root, from_=100, to=300, orient="horizontal", variable=self.rate)
        self.volume_label = ttk.Label(self.root, text="Volume:")
        self.volume_slider = ttk.Scale(self.root, from_=0, to=1, orient="horizontal", variable=self.volume)
        self.play_button = ttk.Button(self.root, text="Play", command=self.play)
        self.pause_button = ttk.Button(self.root, text="Pause", command=self.pause)
        self.stop_button = ttk.Button(self.root, text="Stop", command=self.stop)
        self.save_button = ttk.Button(self.root, text="Save", command=self.save)

        # Layout
        self.language_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.language_dropdown.grid(row=0, column=1, padx=10, pady=5, sticky="w")
        self.voice_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.voice_dropdown.grid(row=1, column=1, padx=10, pady=5, sticky="w")
        self.text_entry.grid(row=2, column=0, columnspan=2, padx=10, pady=5)
        self.rate_label.grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.rate_slider.grid(row=3, column=1, padx=10, pady=5, sticky="w")
        self.volume_label.grid(row=4, column=0, padx=10, pady=5, sticky="w")
        self.volume_slider.grid(row=4, column=1, padx=10, pady=5, sticky="w")
        self.play_button.grid(row=5, column=0, padx=10, pady=5)
        self.pause_button.grid(row=5, column=1, padx=10, pady=5)
        self.stop_button.grid(row=5, column=2, padx=10, pady=5)
        self.save_button.grid(row=5, column=3, padx=10, pady=5)

        # Initialize TTS engine
        self.engine = pyttsx3.init()

    def play(self):
        if not self.playing:
            text = self.text_input.get()
            language = self.selected_language.get()
            voice = self.selected_voice.get()
            rate = self.rate.get()
            volume = self.volume.get()

            try:
                # Set speech parameters
                self.engine.setProperty("rate", rate)
                self.engine.setProperty("volume", volume)

                # Convert text to speech
                if language == "English":
                    if voice == "Male":
                        self.engine.setProperty("voice", "english+m7")
                    elif voice == "Female":
                        self.engine.setProperty("voice", "english+f3")
                elif language == "Spanish":
                    if voice == "Male":
                        self.engine.setProperty("voice", "spanish+m7")
                    elif voice == "Female":
                        self.engine.setProperty("voice", "spanish+f3")
                elif language == "French":
                    if voice == "Male":
                        self.engine.setProperty("voice", "french+m7")
                    elif voice == "Female":
                        self.engine.setProperty("voice", "french+f3")

                self.engine.say(text)
                self.engine.runAndWait()
                self.playing = True

            except Exception as e:
                messagebox.showerror("Error", str(e))

    def pause(self):
        self.engine.stop()
        self.playing = False

    def stop(self):
        self.engine.stop()
        self.playing = False
    
    def save(self):
        text = self.text_input.get()
        language = self.selected_language.get()
        voice = self.selected_voice.get()
        rate = self.rate.get()
        volume = self.volume.get()

        # Prompt the user to choose the file location and format
        filename = filedialog.asksaveasfilename(defaultextension=".wav", filetypes=[("WAV files", ".wav"), ("MP3 files", ".mp3")])

        # Check if a file was selected
        if filename:
            try:
                # Initialize a new TTS engine
                engine = pyttsx3.init()
                engine.setProperty("rate", rate)
                engine.setProperty("volume", volume)

                # Set the language and voice
                if language == "English":
                    if voice == "Male":
                        engine.setProperty("voice", "english+m7")
                    elif voice == "Female":
                        engine.setProperty("voice", "english+f3")
                elif language == "Spanish":
                    if voice == "Male":
                        engine.setProperty("voice", "spanish+m7")
                    elif voice == "Female":
                        engine.setProperty("voice", "spanish+f3")
                elif language == "French":
                    if voice == "Male":
                        engine.setProperty("voice", "french+m7")
                    elif voice == "Female":
                        engine.setProperty("voice", "french+f3")

                # Save the speech to the selected file
                engine.save_to_file(text, filename)
                messagebox.showinfo("Save", "Speech saved successfully.")

            except Exception as e:
                messagebox.showerror("Error", str(e))

def main():
    app = TextToSpeechApp()
    app.root.mainloop()

if __name__ == "__main__":
    main()
